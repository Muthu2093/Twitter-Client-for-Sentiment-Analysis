#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
## Storing the last index of reverserGeocode to set the starting point of next query
setwd("../data_collected")
write.csv(data.frame(i), file = "index")
setwd("../Scripts")
## Reading the states extracted from reverse_geocode  so far
setwd("../data_collected")
statesFrequency <- read.csv("../data_collected/statesFrequency")
statesFrequency<- subset(statesFrequency, select = -c(X)) #removing column named X
setwd("../Scripts")
## Writing the conslidated states to csv file
statesFrequency = rbind(statesFrequency,states)
setwd("../data_collected")
write.csv(statesFrequency, file = "statesFrequency")
setwd("../Scripts")
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
## Storing the last index of reverserGeocode to set the starting point of next query
setwd("../data_collected")
write.csv(data.frame(i), file = "index")
setwd("../Scripts")
## Reading the states extracted from reverse_geocode  so far
setwd("../data_collected")
statesFrequency <- read.csv("../data_collected/statesFrequency")
statesFrequency<- subset(statesFrequency, select = -c(X)) #removing column named X
setwd("../Scripts")
## Writing the conslidated states to csv file
statesFrequency = rbind(statesFrequency,states)
setwd("../data_collected")
write.csv(statesFrequency, file = "statesFrequency")
setwd("../Scripts")
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
## Storing the last index of reverserGeocode to set the starting point of next query
setwd("../data_collected")
write.csv(data.frame(i), file = "index")
setwd("../Scripts")
## Reading the states extracted from reverse_geocode  so far
setwd("../data_collected")
statesFrequency <- read.csv("../data_collected/statesFrequency")
statesFrequency<- subset(statesFrequency, select = -c(X)) #removing column named X
setwd("../Scripts")
## Writing the conslidated states to csv file
statesFrequency = rbind(statesFrequency,states)
setwd("../data_collected")
write.csv(statesFrequency, file = "statesFrequency")
setwd("../Scripts")
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
## Storing the last index of reverserGeocode to set the starting point of next query
setwd("../data_collected")
write.csv(data.frame(i), file = "index")
setwd("../Scripts")
## Reading the states extracted from reverse_geocode  so far
setwd("../data_collected")
statesFrequency <- read.csv("../data_collected/statesFrequency")
statesFrequency<- subset(statesFrequency, select = -c(X)) #removing column named X
setwd("../Scripts")
## Writing the conslidated states to csv file
statesFrequency = rbind(statesFrequency,states)
setwd("../data_collected")
write.csv(statesFrequency, file = "statesFrequency")
setwd("../Scripts")
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
## Storing the last index of reverserGeocode to set the starting point of next query
setwd("../data_collected")
write.csv(data.frame(i), file = "index")
setwd("../Scripts")
## Reading the states extracted from reverse_geocode  so far
setwd("../data_collected")
statesFrequency <- read.csv("../data_collected/statesFrequency")
statesFrequency<- subset(statesFrequency, select = -c(X)) #removing column named X
setwd("../Scripts")
## Writing the conslidated states to csv file
statesFrequency = rbind(statesFrequency,states)
setwd("../data_collected")
write.csv(statesFrequency, file = "statesFrequency")
setwd("../Scripts")
## Reverse Geocoding for extracting the states names for heatmap from the tweets gathered
library(twitteR)
library(ggplot2)
library(ggmap)
library(data.table)
## Reading the tweet collected so far
setwd("../data_collected")
location_GeoCode <- read.csv("../data_collected/location_GeoCode")
location_GeoCode<- subset(location_GeoCode, select = -c(X)) #removing column named X
setwd("../Scripts")
## Reading the starting index of query
setwd("../data_collected")
index <- read.csv("../data_collected/index")
index <- subset(index, select = -c(X)) #removing column named X
setwd("../Scripts")
indicator <- 0
start=index$i[1]
end=index$i[1]+2500
for (i in start:end)
{
# print(i)
# Checking if we are exceeding the dimension of tweet input DF
if (i>=nrow(location_GeoCode))
{
i=i-1
break
}
a <- data.frame(revgeocode(as.numeric(location_GeoCode[i,]),output = c("more"), override_limit = TRUE))
#if (is.na(a))
#{
#  next
#}
temp <- data.frame(a$administrative_area_level_1)
if (indicator == 0)
{
states = temp
indicator <- 1
}
if (indicator != 0)
{
states = rbind(states,temp)
}
}
i=i+1
View(statesFrequency)
rm(list =ls())
library(ggplot2)
Weekly_data<- read.csv("../Data/Number of Influenza-Associated Pediatric Deaths/PedFluDeath_WeeklyData.csv")
rawdata <- Weekly_data
x_axis <- Weekly_data$WEEK.NUMBER[c(6*c(1:32))]
#x_axis=Weekly_data[1:20,]
#x_axis=x_axis[c(2)]
SeasonDeath_data<-read.csv("../Data/Number of Influenza-Associated Pediatric Deaths/Season_Deaths.csv")
Weekly_data <- subset(Weekly_data, select =-c(1))
Data = melt(Weekly_data, id=c("WEEK.NUMBER"))
p<-ggplot(Data,aes(x=WEEK.NUMBER, y=value, fill=variable)) +
geom_bar(stat="identity", position="stack", colour="black") +
scale_fill_manual(name = "Week of Death",
labels = c("Deaths Reported Current Week", "Deaths Reported in Previous Week"),
values = c("CURRENT.WEEK.DEATHS"="cyan", "PREVIOUS.WEEKS.DEATHS"="forestgreen")) +
labs(x="", y="Number of deaths", fill=NULL)
#b<-p+scale_fill_brewer(palette = "Set1")
b<- p+ theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x=element_text(angle=90, size=8, face="bold", color="black"),
legend.position= "bottom")
b <- b + scale_y_continuous(limit = c(0, 30))+
scale_x_discrete(breaks=x_axis,
labels=x_axis)+
annotate("text", x = 20, y = 20, label = "2014 -2015", size = 4)+
annotate("text", x = 20, y = 19, label = "Number of Deaths Reported = 148", size = 2)+
annotate("text", x = 70, y = 20, label = "2015 -2016", size = 4)+
annotate("text", x = 70, y = 19, label = "Number of Deaths Reported = 93", size = 2)+
annotate("text", x = 120, y = 20, label = "2016 -2017", size = 4)+
annotate("text", x = 120, y = 19, label = "Number of Deaths Reported = 110", size = 2)+
annotate("text", x = 170, y = 20, label = "2017 -2018", size = 4)+
annotate("text", x = 170, y = 19, label = "Number of Deaths Reported = 53", size = 2) +
ggtitle("Number of Influenza-Associated Pediatric Deaths by the Week of Death: 2014-2015 Season to Present")
b
SeasonDeath_data<-read.csv("../Data/Number of Influenza-Associated Pediatric Deaths/Season_Deaths.csv")
setwd("~/Documents/GitHub/Twitter-client-for-Data-Collection-and-Exploratory-Data-Analysis-/Lab1Part2/Akshay_Scripts")
rm(list =ls())
library(ggplot2)
Weekly_data<- read.csv("../Data/Number of Influenza-Associated Pediatric Deaths/PedFluDeath_WeeklyData.csv")
rawdata <- Weekly_data
x_axis <- Weekly_data$WEEK.NUMBER[c(6*c(1:32))]
SeasonDeath_data<-read.csv("../Data/Number of Influenza-Associated Pediatric Deaths/Season_Deaths.csv")
Weekly_data <- subset(Weekly_data, select =-c(1))
View(SeasonDeath_data)
setwd("~/Documents/GitHub/Twitter-client-for-Data-Collection-and-Exploratory-Data-Analysis-/Lab1Part3/Scripts")
library(ggplot2)
library(maps)
library(fiftystater)
library(maps)
data <- read.csv("../data_collected/statesFrequency")
data<- subset(data, select = -c(X)) #removing column named X
setwd("../Scripts")
alpha = sort(table(data), decreasing = TRUE)
data("fifty_states")
checker <- data.frame(state.name)
colnames(checker) <- c("state")
rownames <- rownames(alpha)
rownames(alpha) <- NULL
alpha <- data.frame(cbind(rownames,alpha))
colnames(alpha) <- c("state", "count")
pointer = 1
## Code to filter and keep only the 50 - us states(48 continental + Hawaii + Alaska)
for (i in 1:nrow(alpha))
{
for (j in 1:nrow(checker))
{
if (as.character(alpha$state[i])==as.character(checker$state[j]))
{
if (pointer == 1)
{
temp = alpha[i,]
pointer = 2
next
}
if (pointer == 2)
{
temp = rbind(temp,alpha[i,])
}
}
}
}
as.numeric(levels(temp$count))[temp$count]
as.numeric(levels(temp$count))
## Code to filter and keep only the 50 - us states(48 continental + Hawaii + Alaska)
for (i in 1:nrow(alpha))
for (i in 1:nrow(alpha))
{
for (j in 1:nrow(checker))
{
if (as.character(alpha$state[i])==as.character(checker$state[j]))
{
if (pointer == 1)
{
temp = alpha[i,]
pointer = 2
next
}
if (pointer == 2)
{
temp = rbind(temp,alpha[i,])
}
}
}
}
